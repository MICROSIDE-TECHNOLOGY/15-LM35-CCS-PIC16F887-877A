CCS PCM C Compiler, Version 5.076, 56587               24-feb.-22 15:24

               Filename:   E:\Martin Hdez\Desktop\CCS 16F\877A\Práctica 15\Sensor de temperatura LM35.lst

               ROM used:   941 words (11%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           35 (10%) worst case
               Stack used: 3 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   33B
0003:  NOP
.................... /* 
.................... AUTOR: MICROSIDE TECHNOLOGY S.A. DE C.V. 
.................... FECHA: JUNIO 2019 
.................... */ 
....................  
.................... /* 
.................... ------------------------------------------------------------------------------ 
.................... Esta práctica consiste en realizar la medición de temperatura por medio de un 
.................... sensor LM35 e imprimir la lectura en una pantalla LCD 
.................... ------------------------------------------------------------------------------ 
.................... */ 
....................  
.................... #include <16F877A.h>                            //Incluye el microcontrolador con el que se va a trabajar  
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 0C,2A
000D:  DATA E5,36
000E:  DATA F0,32
000F:  DATA F2,30
0010:  DATA F4,3A
0011:  DATA F2,30
0012:  DATA 20,05
0013:  DATA A5,19
0014:  DATA AE,18
0015:  DATA E6,21
0016:  DATA 00,00
*
00E9:  MOVLW  8E
00EA:  MOVWF  77
00EB:  MOVF   25,W
00EC:  MOVWF  78
00ED:  MOVF   24,W
00EE:  MOVWF  79
00EF:  CLRF   7A
00F0:  MOVF   78,F
00F1:  BTFSS  03.2
00F2:  GOTO   0FD
00F3:  MOVF   79,W
00F4:  MOVWF  78
00F5:  CLRF   79
00F6:  MOVLW  08
00F7:  SUBWF  77,F
00F8:  MOVF   78,F
00F9:  BTFSS  03.2
00FA:  GOTO   0FD
00FB:  CLRF   77
00FC:  GOTO   105
00FD:  BCF    03.0
00FE:  BTFSC  78.7
00FF:  GOTO   104
0100:  RLF    79,F
0101:  RLF    78,F
0102:  DECF   77,F
0103:  GOTO   0FD
0104:  BCF    78.7
0105:  BCF    0A.3
0106:  BCF    0A.4
0107:  GOTO   36D (RETURN)
0108:  MOVF   31,W
0109:  BTFSC  03.2
010A:  GOTO   178
010B:  MOVWF  39
010C:  MOVF   35,W
010D:  BTFSC  03.2
010E:  GOTO   178
010F:  ADDWF  39,F
0110:  BTFSC  03.0
0111:  GOTO   119
0112:  MOVLW  7F
0113:  SUBWF  39,F
0114:  BTFSS  03.0
0115:  GOTO   178
0116:  BTFSC  03.2
0117:  GOTO   178
0118:  GOTO   11D
0119:  MOVLW  81
011A:  ADDWF  39,F
011B:  BTFSC  03.0
011C:  GOTO   178
011D:  MOVF   39,W
011E:  MOVWF  77
011F:  CLRF   78
0120:  CLRF   79
0121:  CLRF   7A
0122:  MOVF   32,W
0123:  MOVWF  3D
0124:  BSF    3D.7
0125:  MOVF   33,W
0126:  MOVWF  3C
0127:  MOVF   34,W
0128:  MOVWF  3B
0129:  MOVLW  18
012A:  MOVWF  39
012B:  CLRF   3A
012C:  BTFSS  3B.0
012D:  GOTO   146
012E:  MOVF   38,W
012F:  ADDWF  7A,F
0130:  BTFSS  03.0
0131:  GOTO   138
0132:  INCF   79,F
0133:  BTFSS  03.2
0134:  GOTO   138
0135:  INCF   78,F
0136:  BTFSC  03.2
0137:  BSF    3A.7
0138:  MOVF   37,W
0139:  ADDWF  79,F
013A:  BTFSS  03.0
013B:  GOTO   13F
013C:  INCF   78,F
013D:  BTFSC  03.2
013E:  BSF    3A.7
013F:  MOVF   36,W
0140:  MOVWF  33
0141:  BSF    33.7
0142:  MOVF   33,W
0143:  ADDWF  78,F
0144:  BTFSC  03.0
0145:  BSF    3A.7
0146:  RLF    3A,F
0147:  RRF    78,F
0148:  RRF    79,F
0149:  RRF    7A,F
014A:  RRF    3D,F
014B:  RRF    3C,F
014C:  RRF    3B,F
014D:  BCF    03.0
014E:  DECFSZ 39,F
014F:  GOTO   12B
0150:  MOVLW  01
0151:  ADDWF  77,F
0152:  BTFSC  03.0
0153:  GOTO   178
0154:  BTFSC  78.7
0155:  GOTO   15D
0156:  RLF    3D,F
0157:  RLF    7A,F
0158:  RLF    79,F
0159:  RLF    78,F
015A:  DECF   77,F
015B:  BTFSC  03.2
015C:  GOTO   178
015D:  BTFSS  3D.7
015E:  GOTO   16E
015F:  INCF   7A,F
0160:  BTFSS  03.2
0161:  GOTO   16E
0162:  INCF   79,F
0163:  BTFSS  03.2
0164:  GOTO   16E
0165:  INCF   78,F
0166:  BTFSS  03.2
0167:  GOTO   16E
0168:  RRF    78,F
0169:  RRF    79,F
016A:  RRF    7A,F
016B:  INCF   77,F
016C:  BTFSC  03.2
016D:  GOTO   178
016E:  MOVF   32,W
016F:  MOVWF  3A
0170:  MOVF   36,W
0171:  XORWF  3A,F
0172:  BTFSS  3A.7
0173:  GOTO   176
0174:  BSF    78.7
0175:  GOTO   17C
0176:  BCF    78.7
0177:  GOTO   17C
0178:  CLRF   77
0179:  CLRF   78
017A:  CLRF   79
017B:  CLRF   7A
017C:  RETURN
*
01B1:  MOVF   0B,W
01B2:  MOVWF  25
01B3:  BCF    0B.7
01B4:  BSF    03.5
01B5:  BSF    03.6
01B6:  BSF    0C.7
01B7:  BSF    0C.0
01B8:  NOP
01B9:  NOP
01BA:  BCF    03.5
01BB:  BCF    03.6
01BC:  BTFSC  25.7
01BD:  BSF    0B.7
01BE:  BTFSC  03.0
01BF:  GOTO   1E8
01C0:  BSF    03.6
01C1:  MOVF   0C,W
01C2:  ANDLW  7F
01C3:  BCF    03.6
01C4:  MOVWF  25
01C5:  BSF    03.6
01C6:  MOVF   0D,W
01C7:  BCF    03.6
01C8:  MOVWF  26
01C9:  BSF    03.6
01CA:  MOVF   0F,W
01CB:  BCF    03.6
01CC:  MOVWF  27
01CD:  MOVF   25,W
01CE:  MOVWF  31
01CF:  CALL   17D
01D0:  MOVF   26,W
01D1:  BSF    03.6
01D2:  MOVWF  0D
01D3:  BCF    03.6
01D4:  MOVF   27,W
01D5:  BSF    03.6
01D6:  MOVWF  0F
01D7:  BCF    03.6
01D8:  MOVF   0B,W
01D9:  MOVWF  28
01DA:  BCF    0B.7
01DB:  BSF    03.5
01DC:  BSF    03.6
01DD:  BSF    0C.7
01DE:  BSF    0C.0
01DF:  NOP
01E0:  NOP
01E1:  BCF    03.5
01E2:  BCF    03.6
01E3:  BTFSC  28.7
01E4:  BSF    0B.7
01E5:  DECFSZ 24,F
01E6:  GOTO   1E8
01E7:  GOTO   207
01E8:  BSF    03.6
01E9:  RLF    0C,W
01EA:  RLF    0E,W
01EB:  ANDLW  7F
01EC:  BCF    03.6
01ED:  MOVWF  25
01EE:  BSF    03.6
01EF:  MOVF   0D,W
01F0:  BCF    03.6
01F1:  MOVWF  26
01F2:  BSF    03.6
01F3:  MOVF   0F,W
01F4:  BCF    03.6
01F5:  MOVWF  27
01F6:  MOVF   25,W
01F7:  MOVWF  31
01F8:  CALL   17D
01F9:  MOVF   26,W
01FA:  BSF    03.6
01FB:  MOVWF  0D
01FC:  BCF    03.6
01FD:  MOVF   27,W
01FE:  BSF    03.6
01FF:  MOVWF  0F
0200:  INCF   0D,F
0201:  BTFSC  03.2
0202:  INCF   0F,F
0203:  BCF    03.0
0204:  BCF    03.6
0205:  DECFSZ 24,F
0206:  GOTO   1B1
0207:  BCF    0A.3
0208:  BCF    0A.4
0209:  GOTO   398 (RETURN)
020A:  BTFSC  03.1
020B:  GOTO   20F
020C:  MOVLW  39
020D:  MOVWF  04
020E:  BCF    03.7
020F:  CLRF   77
0210:  CLRF   78
0211:  CLRF   79
0212:  CLRF   7A
0213:  CLRF   39
0214:  CLRF   3A
0215:  CLRF   3B
0216:  CLRF   3C
0217:  MOVF   38,W
0218:  IORWF  37,W
0219:  IORWF  36,W
021A:  IORWF  35,W
021B:  BTFSC  03.2
021C:  GOTO   24D
021D:  MOVLW  20
021E:  MOVWF  3D
021F:  BCF    03.0
0220:  RLF    31,F
0221:  RLF    32,F
0222:  RLF    33,F
0223:  RLF    34,F
0224:  RLF    39,F
0225:  RLF    3A,F
0226:  RLF    3B,F
0227:  RLF    3C,F
0228:  MOVF   38,W
0229:  SUBWF  3C,W
022A:  BTFSS  03.2
022B:  GOTO   236
022C:  MOVF   37,W
022D:  SUBWF  3B,W
022E:  BTFSS  03.2
022F:  GOTO   236
0230:  MOVF   36,W
0231:  SUBWF  3A,W
0232:  BTFSS  03.2
0233:  GOTO   236
0234:  MOVF   35,W
0235:  SUBWF  39,W
0236:  BTFSS  03.0
0237:  GOTO   247
0238:  MOVF   35,W
0239:  SUBWF  39,F
023A:  MOVF   36,W
023B:  BTFSS  03.0
023C:  INCFSZ 36,W
023D:  SUBWF  3A,F
023E:  MOVF   37,W
023F:  BTFSS  03.0
0240:  INCFSZ 37,W
0241:  SUBWF  3B,F
0242:  MOVF   38,W
0243:  BTFSS  03.0
0244:  INCFSZ 38,W
0245:  SUBWF  3C,F
0246:  BSF    03.0
0247:  RLF    77,F
0248:  RLF    78,F
0249:  RLF    79,F
024A:  RLF    7A,F
024B:  DECFSZ 3D,F
024C:  GOTO   21F
024D:  MOVF   39,W
024E:  MOVWF  00
024F:  INCF   04,F
0250:  MOVF   3A,W
0251:  MOVWF  00
0252:  INCF   04,F
0253:  MOVF   3B,W
0254:  MOVWF  00
0255:  INCF   04,F
0256:  MOVF   3C,W
0257:  MOVWF  00
0258:  RETURN
0259:  MOVF   04,W
025A:  MOVWF  29
025B:  MOVF   28,W
025C:  MOVWF  2B
025D:  BTFSC  03.2
025E:  GOTO   278
025F:  MOVF   27,W
0260:  MOVWF  34
0261:  MOVF   26,W
0262:  MOVWF  33
0263:  MOVF   25,W
0264:  MOVWF  32
0265:  MOVF   24,W
0266:  MOVWF  31
0267:  CLRF   38
0268:  CLRF   37
0269:  MOVLW  20
026A:  MOVWF  36
026B:  MOVLW  82
026C:  MOVWF  35
026D:  CALL   108
026E:  MOVF   7A,W
026F:  MOVWF  27
0270:  MOVF   79,W
0271:  MOVWF  26
0272:  MOVF   78,W
0273:  MOVWF  25
0274:  MOVF   77,W
0275:  MOVWF  24
0276:  DECFSZ 2B,F
0277:  GOTO   25F
0278:  MOVF   27,W
0279:  MOVWF  34
027A:  MOVF   26,W
027B:  MOVWF  33
027C:  MOVF   25,W
027D:  MOVWF  32
027E:  MOVF   24,W
027F:  MOVWF  31
0280:  MOVF   31,W
0281:  SUBLW  B6
0282:  MOVWF  31
0283:  CLRF   7A
0284:  MOVF   32,W
0285:  MOVWF  35
0286:  BSF    32.7
0287:  BCF    03.0
0288:  RRF    32,F
0289:  RRF    33,F
028A:  RRF    34,F
028B:  RRF    7A,F
028C:  RRF    79,F
028D:  RRF    78,F
028E:  RRF    77,F
028F:  DECFSZ 31,F
0290:  GOTO   287
0291:  BTFSS  35.7
0292:  GOTO   29E
0293:  COMF   77,F
0294:  COMF   78,F
0295:  COMF   79,F
0296:  COMF   7A,F
0297:  INCF   77,F
0298:  BTFSC  03.2
0299:  INCF   78,F
029A:  BTFSC  03.2
029B:  INCF   79,F
029C:  BTFSC  03.2
029D:  INCF   7A,F
029E:  MOVF   7A,W
029F:  MOVWF  27
02A0:  MOVF   79,W
02A1:  MOVWF  26
02A2:  MOVF   78,W
02A3:  MOVWF  25
02A4:  MOVF   77,W
02A5:  MOVWF  24
02A6:  BTFSS  27.7
02A7:  GOTO   2B5
02A8:  DECF   29,F
02A9:  BSF    29.5
02AA:  COMF   24,F
02AB:  COMF   25,F
02AC:  COMF   26,F
02AD:  COMF   27,F
02AE:  INCF   24,F
02AF:  BTFSC  03.2
02B0:  INCF   25,F
02B1:  BTFSC  03.2
02B2:  INCF   26,F
02B3:  BTFSC  03.2
02B4:  INCF   27,F
02B5:  MOVLW  3B
02B6:  MOVWF  30
02B7:  MOVLW  9A
02B8:  MOVWF  2F
02B9:  MOVLW  CA
02BA:  MOVWF  2E
02BB:  CLRF   2D
02BC:  MOVLW  0A
02BD:  MOVWF  2B
02BE:  MOVF   28,W
02BF:  BTFSC  03.2
02C0:  INCF   29,F
02C1:  BSF    03.1
02C2:  MOVLW  24
02C3:  MOVWF  04
02C4:  BCF    03.7
02C5:  MOVF   27,W
02C6:  MOVWF  34
02C7:  MOVF   26,W
02C8:  MOVWF  33
02C9:  MOVF   25,W
02CA:  MOVWF  32
02CB:  MOVF   24,W
02CC:  MOVWF  31
02CD:  MOVF   30,W
02CE:  MOVWF  38
02CF:  MOVF   2F,W
02D0:  MOVWF  37
02D1:  MOVF   2E,W
02D2:  MOVWF  36
02D3:  MOVF   2D,W
02D4:  MOVWF  35
02D5:  CALL   20A
02D6:  MOVF   78,W
02D7:  MOVF   77,F
02D8:  BTFSS  03.2
02D9:  GOTO   2ED
02DA:  INCF   28,W
02DB:  SUBWF  2B,W
02DC:  BTFSC  03.2
02DD:  GOTO   2ED
02DE:  MOVF   29,W
02DF:  BTFSC  03.2
02E0:  GOTO   2EF
02E1:  ANDLW  0F
02E2:  SUBWF  2B,W
02E3:  BTFSC  03.2
02E4:  GOTO   2E7
02E5:  BTFSC  03.0
02E6:  GOTO   31F
02E7:  BTFSC  29.7
02E8:  GOTO   31F
02E9:  BTFSC  29.6
02EA:  GOTO   2EF
02EB:  MOVLW  20
02EC:  GOTO   31B
02ED:  MOVLW  20
02EE:  ANDWF  29,F
02EF:  BTFSS  29.5
02F0:  GOTO   2FD
02F1:  BCF    29.5
02F2:  MOVF   28,W
02F3:  BTFSS  03.2
02F4:  DECF   29,F
02F5:  MOVF   77,W
02F6:  MOVWF  29
02F7:  MOVLW  2D
02F8:  MOVWF  31
02F9:  CALL   17D
02FA:  MOVF   29,W
02FB:  MOVWF  77
02FC:  CLRF   29
02FD:  MOVF   28,W
02FE:  SUBWF  2B,W
02FF:  BTFSS  03.2
0300:  GOTO   30B
0301:  MOVF   77,W
0302:  MOVWF  29
0303:  MOVLW  2E
0304:  MOVWF  31
0305:  CALL   17D
0306:  MOVF   29,W
0307:  MOVWF  77
0308:  MOVLW  20
0309:  ANDWF  29,F
030A:  MOVLW  00
030B:  MOVLW  30
030C:  BTFSS  29.5
030D:  GOTO   31B
030E:  BCF    29.5
030F:  MOVF   28,W
0310:  BTFSS  03.2
0311:  DECF   29,F
0312:  MOVF   77,W
0313:  MOVWF  29
0314:  MOVLW  2D
0315:  MOVWF  31
0316:  CALL   17D
0317:  MOVF   29,W
0318:  MOVWF  77
0319:  CLRF   29
031A:  MOVLW  30
031B:  ADDWF  77,F
031C:  MOVF   77,W
031D:  MOVWF  31
031E:  CALL   17D
031F:  BCF    03.1
0320:  MOVF   30,W
0321:  MOVWF  34
0322:  MOVF   2F,W
0323:  MOVWF  33
0324:  MOVF   2E,W
0325:  MOVWF  32
0326:  MOVF   2D,W
0327:  MOVWF  31
0328:  CLRF   38
0329:  CLRF   37
032A:  CLRF   36
032B:  MOVLW  0A
032C:  MOVWF  35
032D:  CALL   20A
032E:  MOVF   7A,W
032F:  MOVWF  30
0330:  MOVF   79,W
0331:  MOVWF  2F
0332:  MOVF   78,W
0333:  MOVWF  2E
0334:  MOVF   77,W
0335:  MOVWF  2D
0336:  DECFSZ 2B,F
0337:  GOTO   2C1
0338:  BCF    0A.3
0339:  BCF    0A.4
033A:  GOTO   3A5 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10                                  // Configura el ADC a 10 bits 
.................... #use delay(clock=20Mhz, crystal)                //Tipo de oscilador y frecuencia dependiendo del microcontrolador  
*
0017:  MOVLW  32
0018:  MOVWF  04
0019:  BCF    03.7
001A:  MOVF   00,W
001B:  BTFSC  03.2
001C:  GOTO   02A
001D:  MOVLW  06
001E:  MOVWF  78
001F:  CLRF   77
0020:  DECFSZ 77,F
0021:  GOTO   020
0022:  DECFSZ 78,F
0023:  GOTO   01F
0024:  MOVLW  7B
0025:  MOVWF  77
0026:  DECFSZ 77,F
0027:  GOTO   026
0028:  DECFSZ 00,F
0029:  GOTO   01D
002A:  RETURN
....................  
....................  
.................... /* 
.................... ------------------------------------------------------------------------------ 
.................... CONFIGURACION DE PINES LCD 
.................... ------------------------------------------------------------------------------ 
.................... */ 
....................   
.................... #define LCD_RS PIN_B0             //CONTROL del LCD 
.................... #define LCD_RW PIN_B1 
.................... #define LCD_E PIN_B2 
.................... #define LCD_DB4 PIN_B3            //DATOS del LCD (4 lineas) 
.................... #define LCD_DB5 PIN_B4 
.................... #define LCD_DB6 PIN_B5 
.................... #define LCD_DB7 PIN_B6 
....................  
.................... #include "flex_lcd.h"             //LIBRERIA LCD 
....................  
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board, 
.................... // which is what I used to test the driver.  Change these 
.................... // pins to fit your own board. 
....................  
.................... //#define LCD_DB4   PIN_B4 
.................... //#define LCD_DB5   PIN_B5 
.................... //#define LCD_DB6   PIN_B6 
.................... //#define LCD_DB7   PIN_B7 
.................... // 
.................... //#define LCD_RS    PIN_C0 
.................... //#define LCD_RW    PIN_C1 
.................... //#define LCD_E     PIN_C2 
....................  
.................... // If you only want a 6-pin interface to your LCD, then 
.................... // connect the R/W pin on the LCD to ground, and comment 
.................... // out the following line. 
....................  
.................... #define USE_LCD_RW   1 
....................  
.................... //======================================== 
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0xc,                    // Display on 
....................  1,                      // Clear display 
....................  6                       // Increment cursor 
....................  }; 
....................  
....................  
.................... //------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
.................... // Note:  !! converts an integer expression 
.................... // to a boolean (1 or 0). 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
002B:  BTFSC  39.0
002C:  GOTO   02F
002D:  BCF    06.3
002E:  GOTO   030
002F:  BSF    06.3
0030:  BSF    03.5
0031:  BCF    06.3
....................  output_bit(LCD_DB5, !!(nibble & 2)); 
0032:  BCF    03.5
0033:  BTFSC  39.1
0034:  GOTO   037
0035:  BCF    06.4
0036:  GOTO   038
0037:  BSF    06.4
0038:  BSF    03.5
0039:  BCF    06.4
....................  output_bit(LCD_DB6, !!(nibble & 4)); 
003A:  BCF    03.5
003B:  BTFSC  39.2
003C:  GOTO   03F
003D:  BCF    06.5
003E:  GOTO   040
003F:  BSF    06.5
0040:  BSF    03.5
0041:  BCF    06.5
....................  output_bit(LCD_DB7, !!(nibble & 8)); 
0042:  BCF    03.5
0043:  BTFSC  39.3
0044:  GOTO   047
0045:  BCF    06.6
0046:  GOTO   048
0047:  BSF    06.6
0048:  BSF    03.5
0049:  BCF    06.6
....................  
....................  delay_cycles(1); 
004A:  NOP
....................  output_high(LCD_E); 
004B:  BCF    06.2
004C:  BCF    03.5
004D:  BSF    06.2
....................  delay_us(2); 
004E:  MOVLW  03
004F:  MOVWF  77
0050:  DECFSZ 77,F
0051:  GOTO   050
....................  output_low(LCD_E); 
0052:  BSF    03.5
0053:  BCF    06.2
0054:  BCF    03.5
0055:  BCF    06.2
0056:  RETURN
.................... } 
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine.  For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
.................... int8 retval; 
.................... // Create bit variables so that we can easily set 
.................... // individual bits in the retval variable. 
.................... #bit retval_0 = retval.0 
.................... #bit retval_1 = retval.1 
.................... #bit retval_2 = retval.2 
.................... #bit retval_3 = retval.3 
....................  
.................... retval = 0; 
0057:  CLRF   3A
....................  
.................... output_high(LCD_E); 
0058:  BSF    03.5
0059:  BCF    06.2
005A:  BCF    03.5
005B:  BSF    06.2
.................... delay_cycles(1); 
005C:  NOP
....................  
.................... retval_0 = input(LCD_DB4); 
005D:  BSF    03.5
005E:  BSF    06.3
005F:  BCF    03.5
0060:  BCF    3A.0
0061:  BTFSC  06.3
0062:  BSF    3A.0
.................... retval_1 = input(LCD_DB5); 
0063:  BSF    03.5
0064:  BSF    06.4
0065:  BCF    03.5
0066:  BCF    3A.1
0067:  BTFSC  06.4
0068:  BSF    3A.1
.................... retval_2 = input(LCD_DB6); 
0069:  BSF    03.5
006A:  BSF    06.5
006B:  BCF    03.5
006C:  BCF    3A.2
006D:  BTFSC  06.5
006E:  BSF    3A.2
.................... retval_3 = input(LCD_DB7); 
006F:  BSF    03.5
0070:  BSF    06.6
0071:  BCF    03.5
0072:  BCF    3A.3
0073:  BTFSC  06.6
0074:  BSF    3A.3
....................  
.................... output_low(LCD_E); 
0075:  BSF    03.5
0076:  BCF    06.2
0077:  BCF    03.5
0078:  BCF    06.2
....................  
.................... return(retval); 
0079:  MOVF   3A,W
007A:  MOVWF  78
007B:  RETURN
.................... } 
.................... #endif 
....................  
.................... //--------------------------------------- 
.................... // Read a byte from the LCD and return it. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
.................... int8 low; 
.................... int8 high; 
....................  
.................... output_high(LCD_RW); 
*
0080:  BSF    03.5
0081:  BCF    06.1
0082:  BCF    03.5
0083:  BSF    06.1
.................... delay_cycles(1); 
0084:  NOP
....................  
.................... high = lcd_read_nibble(); 
0085:  CALL   057
0086:  MOVF   78,W
0087:  MOVWF  39
....................  
.................... low = lcd_read_nibble(); 
0088:  CALL   057
0089:  MOVF   78,W
008A:  MOVWF  38
....................  
.................... return( (high<<4) | low); 
008B:  SWAPF  39,W
008C:  MOVWF  77
008D:  MOVLW  F0
008E:  ANDWF  77,F
008F:  MOVF   77,W
0090:  IORWF  38,W
0091:  MOVWF  78
.................... } 
.................... #endif 
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
*
007C:  BSF    03.5
007D:  BCF    06.0
007E:  BCF    03.5
007F:  BCF    06.0
....................  
.................... #ifdef USE_LCD_RW 
.................... while(bit_test(lcd_read_byte(),7)) ; 
*
0092:  MOVF   78,W
0093:  MOVWF  38
0094:  BTFSC  38.7
0095:  GOTO   080
.................... #else 
.................... delay_us(60); 
.................... #endif 
....................  
.................... if(address) 
0096:  MOVF   36,F
0097:  BTFSC  03.2
0098:  GOTO   09E
....................    output_high(LCD_RS); 
0099:  BSF    03.5
009A:  BCF    06.0
009B:  BCF    03.5
009C:  BSF    06.0
009D:  GOTO   0A2
.................... else 
....................    output_low(LCD_RS); 
009E:  BSF    03.5
009F:  BCF    06.0
00A0:  BCF    03.5
00A1:  BCF    06.0
....................  
....................  delay_cycles(1); 
00A2:  NOP
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
00A3:  BSF    03.5
00A4:  BCF    06.1
00A5:  BCF    03.5
00A6:  BCF    06.1
.................... delay_cycles(1); 
00A7:  NOP
.................... #endif 
....................  
.................... output_low(LCD_E); 
00A8:  BSF    03.5
00A9:  BCF    06.2
00AA:  BCF    03.5
00AB:  BCF    06.2
....................  
.................... lcd_send_nibble(n >> 4); 
00AC:  SWAPF  37,W
00AD:  MOVWF  38
00AE:  MOVLW  0F
00AF:  ANDWF  38,F
00B0:  MOVF   38,W
00B1:  MOVWF  39
00B2:  CALL   02B
.................... lcd_send_nibble(n & 0xf); 
00B3:  MOVF   37,W
00B4:  ANDLW  0F
00B5:  MOVWF  38
00B6:  MOVWF  39
00B7:  CALL   02B
00B8:  RETURN
.................... } 
....................  
.................... //---------------------------- 
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
00B9:  BSF    03.5
00BA:  BCF    06.0
00BB:  BCF    03.5
00BC:  BCF    06.0
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
00BD:  BSF    03.5
00BE:  BCF    06.1
00BF:  BCF    03.5
00C0:  BCF    06.1
.................... #endif 
....................  
.................... output_low(LCD_E); 
00C1:  BSF    03.5
00C2:  BCF    06.2
00C3:  BCF    03.5
00C4:  BCF    06.2
....................  
.................... delay_ms(15); 
00C5:  MOVLW  0F
00C6:  MOVWF  32
00C7:  CALL   017
....................  
.................... for(i=0 ;i < 3; i++) 
00C8:  CLRF   24
00C9:  MOVF   24,W
00CA:  SUBLW  02
00CB:  BTFSS  03.0
00CC:  GOTO   0D5
....................    { 
....................     lcd_send_nibble(0x03); 
00CD:  MOVLW  03
00CE:  MOVWF  39
00CF:  CALL   02B
....................     delay_ms(5); 
00D0:  MOVLW  05
00D1:  MOVWF  32
00D2:  CALL   017
00D3:  INCF   24,F
00D4:  GOTO   0C9
....................    } 
....................  
.................... lcd_send_nibble(0x02); 
00D5:  MOVLW  02
00D6:  MOVWF  39
00D7:  CALL   02B
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
00D8:  CLRF   24
00D9:  MOVF   24,W
00DA:  SUBLW  03
00DB:  BTFSS  03.0
00DC:  GOTO   0E6
....................    { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
00DD:  MOVF   24,W
00DE:  CALL   004
00DF:  MOVWF  25
00E0:  CLRF   36
00E1:  MOVF   25,W
00E2:  MOVWF  37
00E3:  CALL   07C
....................  
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled.  One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
....................     #ifndef USE_LCD_RW 
00E4:  INCF   24,F
00E5:  GOTO   0D9
....................     delay_ms(5); 
....................     #endif 
....................    } 
00E6:  BCF    0A.3
00E7:  BCF    0A.4
00E8:  GOTO   348 (RETURN)
....................  
.................... } 
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
.................... int8 address; 
....................  
.................... if(y != 1) 
*
0194:  DECFSZ 33,W
0195:  GOTO   197
0196:  GOTO   19A
....................    address = lcd_line_two; 
0197:  MOVLW  40
0198:  MOVWF  34
0199:  GOTO   19B
.................... else 
....................    address=0; 
019A:  CLRF   34
....................  
.................... address += x-1; 
019B:  MOVLW  01
019C:  SUBWF  32,W
019D:  ADDWF  34,F
.................... lcd_send_byte(0, 0x80 | address); 
019E:  MOVF   34,W
019F:  IORLW  80
01A0:  MOVWF  35
01A1:  CLRF   36
01A2:  MOVF   35,W
01A3:  MOVWF  37
01A4:  CALL   07C
.................... } 
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................  switch(c) 
*
017D:  MOVF   31,W
017E:  XORLW  0C
017F:  BTFSC  03.2
0180:  GOTO   188
0181:  XORLW  06
0182:  BTFSC  03.2
0183:  GOTO   190
0184:  XORLW  02
0185:  BTFSC  03.2
0186:  GOTO   1A6
0187:  GOTO   1AB
....................    { 
....................     case '\f': 
....................       lcd_send_byte(0,1); 
0188:  CLRF   36
0189:  MOVLW  01
018A:  MOVWF  37
018B:  CALL   07C
....................       delay_ms(2); 
018C:  MOVLW  02
018D:  MOVWF  32
018E:  CALL   017
....................       break; 
018F:  GOTO   1B0
....................  
....................     case '\n': 
....................        lcd_gotoxy(1,2); 
0190:  MOVLW  01
0191:  MOVWF  32
0192:  MOVLW  02
0193:  MOVWF  33
....................        break; 
*
01A5:  GOTO   1B0
....................  
....................     case '\b': 
....................        lcd_send_byte(0,0x10); 
01A6:  CLRF   36
01A7:  MOVLW  10
01A8:  MOVWF  37
01A9:  CALL   07C
....................        break; 
01AA:  GOTO   1B0
....................  
....................     default: 
....................        lcd_send_byte(1,c); 
01AB:  MOVLW  01
01AC:  MOVWF  36
01AD:  MOVF   31,W
01AE:  MOVWF  37
01AF:  CALL   07C
....................        break; 
....................    } 
01B0:  RETURN
.................... } 
....................  
.................... //------------------------------ 
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
.................... char value; 
....................  
.................... lcd_gotoxy(x,y); 
....................  
.................... // Wait until busy flag is low. 
.................... while(bit_test(lcd_read_byte(),7)); 
....................  
.................... output_high(LCD_RS); 
.................... value = lcd_read_byte(); 
.................... output_low(lcd_RS); 
....................  
.................... return(value); 
.................... } 
.................... #endif 
....................  
.................... void lcd_setcursor_vb(short visible, short blink) {  
....................   lcd_send_byte(0, 0xC|(visible<<1)|blink);  
.................... }  
....................  
....................  
....................  
....................   
....................  
.................... float temperatura;                //variable 
....................  
.................... void main(void) 
*
033B:  MOVF   03,W
033C:  ANDLW  1F
033D:  MOVWF  03
033E:  BSF    03.5
033F:  BSF    1F.0
0340:  BSF    1F.1
0341:  BSF    1F.2
0342:  BCF    1F.3
0343:  MOVLW  07
0344:  MOVWF  1C
0345:  BCF    03.7
....................  
.................... { 
....................  
....................   //setup_oscillator(OSC_8MHZ);     //Configura oscilador 
....................   lcd_init ();                    // comandos de inicialización del lcd. 
0346:  BCF    03.5
0347:  GOTO   0B9
....................   delay_ms (50) ; 
0348:  MOVLW  32
0349:  MOVWF  32
034A:  CALL   017
....................   setup_adc_ports (AN0);          //configuracion indiuvidual deL canal ADC en A0 
034B:  BSF    03.5
034C:  BCF    1F.0
034D:  BSF    1F.1
034E:  BSF    1F.2
034F:  BSF    1F.3
....................   setup_adc (ADC_CLOCK_DIV_8);    //Configura oscilador para la conversión 
0350:  BCF    1F.6
0351:  BCF    03.5
0352:  BSF    1F.6
0353:  BCF    1F.7
0354:  BSF    03.5
0355:  BSF    1F.7
0356:  BCF    03.5
0357:  BSF    1F.0
....................  
....................  
....................    while (1) 
....................  
....................    { 
....................  
....................        set_adc_channel(0);                       //conversion analogica por canal 0 
0358:  MOVLW  00
0359:  MOVWF  78
035A:  MOVF   1F,W
035B:  ANDLW  C7
035C:  IORWF  78,W
035D:  MOVWF  1F
....................        delay_ms(100);                             
035E:  MOVLW  64
035F:  MOVWF  32
0360:  CALL   017
....................  
....................          temperatura = read_adc();               //lee voltaje analogico en puerto A0 
0361:  BSF    1F.2
0362:  BTFSC  1F.2
0363:  GOTO   362
0364:  MOVF   1E,W
0365:  MOVWF  7A
0366:  BSF    03.5
0367:  MOVF   1E,W
0368:  BCF    03.5
0369:  MOVWF  24
036A:  MOVF   1E,W
036B:  MOVWF  25
036C:  GOTO   0E9
036D:  MOVF   7A,W
036E:  MOVWF  23
036F:  MOVF   79,W
0370:  MOVWF  22
0371:  MOVF   78,W
0372:  MOVWF  21
0373:  MOVF   77,W
0374:  MOVWF  20
....................          temperatura = temperatura*0.488;        //5.00volts*temperatura * (100.00/1023.00)=0.488 
0375:  MOVF   23,W
0376:  MOVWF  34
0377:  MOVF   22,W
0378:  MOVWF  33
0379:  MOVF   21,W
037A:  MOVWF  32
037B:  MOVF   20,W
037C:  MOVWF  31
037D:  MOVLW  23
037E:  MOVWF  38
037F:  MOVLW  DB
0380:  MOVWF  37
0381:  MOVLW  79
0382:  MOVWF  36
0383:  MOVLW  7D
0384:  MOVWF  35
0385:  CALL   108
0386:  MOVF   7A,W
0387:  MOVWF  23
0388:  MOVF   79,W
0389:  MOVWF  22
038A:  MOVF   78,W
038B:  MOVWF  21
038C:  MOVF   77,W
038D:  MOVWF  20
....................  
....................          printf(lcd_putc,"\fTemperatura \n%3.1fC", temperatura); //Muestra la información en el LCD 
038E:  MOVLW  0C
038F:  BSF    03.6
0390:  MOVWF  0D
0391:  MOVLW  00
0392:  MOVWF  0F
0393:  BCF    03.0
0394:  MOVLW  0E
0395:  BCF    03.6
0396:  MOVWF  24
0397:  GOTO   1B1
0398:  MOVLW  02
0399:  MOVWF  04
039A:  MOVF   23,W
039B:  MOVWF  27
039C:  MOVF   22,W
039D:  MOVWF  26
039E:  MOVF   21,W
039F:  MOVWF  25
03A0:  MOVF   20,W
03A1:  MOVWF  24
03A2:  MOVLW  01
03A3:  MOVWF  28
03A4:  GOTO   259
03A5:  MOVLW  43
03A6:  MOVWF  31
03A7:  CALL   17D
....................          delay_ms(100); 
03A8:  MOVLW  64
03A9:  MOVWF  32
03AA:  CALL   017
03AB:  GOTO   358
....................  
....................      } 
.................... } 
03AC:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
